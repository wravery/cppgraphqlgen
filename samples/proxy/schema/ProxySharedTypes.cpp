// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "graphqlservice/GraphQLService.h"

#include "ProxySharedTypes.h"

#include <algorithm>
#include <array>
#include <cstddef>
#include <functional>
#include <stdexcept>
#include <string_view>
#include <utility>
#include <vector>

using namespace std::literals;

namespace graphql {
namespace service {

static const auto s_namesOperationType = proxy::getOperationTypeNames();
static const auto s_valuesOperationType = proxy::getOperationTypeValues();

template <>
proxy::OperationType Argument<proxy::OperationType>::convert(const response::Value& value)
{
	if (!value.maybe_enum())
	{
		throw service::schema_exception { { R"ex(not a valid OperationType value)ex" } };
	}

	const auto result = internal::sorted_map_lookup<internal::shorter_or_less>(
		s_valuesOperationType,
		std::string_view { value.get<std::string>() });

	if (!result)
	{
		throw service::schema_exception { { R"ex(not a valid OperationType value)ex" } };
	}

	return *result;
}

template <>
service::AwaitableResolver Result<proxy::OperationType>::convert(service::AwaitableScalar<proxy::OperationType> result, ResolverParams&& params)
{
	return ModifiedResult<proxy::OperationType>::resolve(std::move(result), std::move(params),
		[](proxy::OperationType value, const ResolverParams& params)
		{
			params.resolverVisitor->add_enum(std::string { s_namesOperationType[static_cast<std::size_t>(value)] });
		});
}

template <>
void Result<proxy::OperationType>::validateScalar(const response::Value& value)
{
	if (!value.maybe_enum())
	{
		throw service::schema_exception { { R"ex(not a valid OperationType value)ex" } };
	}

	const auto [itr, itrEnd] = internal::sorted_map_equal_range<internal::shorter_or_less>(
		s_valuesOperationType.begin(),
		s_valuesOperationType.end(),
		std::string_view { value.get<std::string>() });

	if (itr == itrEnd)
	{
		throw service::schema_exception { { R"ex(not a valid OperationType value)ex" } };
	}
}

template <>
proxy::QueryInput Argument<proxy::QueryInput>::convert(const response::Value& value)
{
	auto valueType = service::ModifiedArgument<proxy::OperationType>::require("type", value);
	auto valueQuery = service::ModifiedArgument<std::string>::require("query", value);
	auto valueOperationName = service::ModifiedArgument<std::string>::require<service::TypeModifier::Nullable>("operationName", value);
	auto valueVariables = service::ModifiedArgument<std::string>::require<service::TypeModifier::Nullable>("variables", value);

	return proxy::QueryInput {
		std::move(valueType),
		std::move(valueQuery),
		std::move(valueOperationName),
		std::move(valueVariables)
	};
}

} // namespace service

namespace proxy {

QueryInput::QueryInput() noexcept
	: type {}
	, query {}
	, operationName {}
	, variables {}
{
	// Explicit definition to prevent ODR violations when LTO is enabled.
}

QueryInput::QueryInput(
		OperationType typeArg,
		std::string queryArg,
		std::optional<std::string> operationNameArg,
		std::optional<std::string> variablesArg) noexcept
	: type { std::move(typeArg) }
	, query { std::move(queryArg) }
	, operationName { std::move(operationNameArg) }
	, variables { std::move(variablesArg) }
{
}

QueryInput::QueryInput(const QueryInput& other)
	: type { service::ModifiedArgument<OperationType>::duplicate(other.type) }
	, query { service::ModifiedArgument<std::string>::duplicate(other.query) }
	, operationName { service::ModifiedArgument<std::string>::duplicate<service::TypeModifier::Nullable>(other.operationName) }
	, variables { service::ModifiedArgument<std::string>::duplicate<service::TypeModifier::Nullable>(other.variables) }
{
}

QueryInput::QueryInput(QueryInput&& other) noexcept
	: type { std::move(other.type) }
	, query { std::move(other.query) }
	, operationName { std::move(other.operationName) }
	, variables { std::move(other.variables) }
{
}

QueryInput::~QueryInput()
{
	// Explicit definition to prevent ODR violations when LTO is enabled.
}

QueryInput& QueryInput::operator=(const QueryInput& other)
{
	QueryInput value { other };

	std::swap(*this, value);

	return *this;
}

QueryInput& QueryInput::operator=(QueryInput&& other) noexcept
{
	type = std::move(other.type);
	query = std::move(other.query);
	operationName = std::move(other.operationName);
	variables = std::move(other.variables);

	return *this;
}

} // namespace proxy
} // namespace graphql
